<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_SlaveCtrlMountInstru" Id="{db93de24-03af-45f5-8edb-e02a943fe1f8}" SpecialFunc="None">
    <Declaration><![CDATA[// Brief: Mounting Instrument
FUNCTION_BLOCK PUBLIC FB_SlaveCtrlMountInstru EXTENDS FB_SlaveArmCtrlBase
VAR
	// mount status
	m_instruMountStatus :INT := 0;
	m_scopeMountStatus :INT := 0;
	m_ultrasoundMountStatus :INT :=0 ;
	
	// flag if joint is mounted
	m_jointMounted :ARRAY[1..5] OF BOOL := [5(FALSE)];
	
	// instrument mount motion range
	m_mountMotionAng :Vec5d :=[5(pi)];
	
	// instrument mount direction
	m_mountDir :Vec5i :=[1, 1, 1, 1, 1];
	
	// mount motion planning
	m_jntOTG :ARRAY[1..5] OF FB_secOrdTrajFilter;
	m_instruMountVel :LREAL := 4*PI;
	m_instruMountAcc :LREAL := 8*PI;
	
	//Joint 4 half-range angle of instrument
	m_instruJnt4HalfRangeAng :LREAL := 323*g_deg2Rad;
	
	// joint current threshold which indicate panel is buckled with instrument
	m_maxJntCurrent :Vec5d := [200, 200, 200, 220, 220];
	m_maxJntCurrentOldEndoScope :Vec5d := [200, 200, 200, 350, 350];
	
	// command mount motion
	m_targetMountPos :Vec8d;
	
	// instrument zero position
	m_instruZeroDeviation :Vec5d;
	
	//ultrasound knife Reduce the current rotation Angle  J3
	m_ultraKnifeRotaAngleJ3 :LREAL := 30*g_deg2Rad;
	
	// ultrasound knife rotate angle zero position
	m_ultraKnifeRotAngZeroPos :LREAL := 4.50567;
	
	// joint position error
	m_jntPosErr :Vec5d;
	m_linkSingleErr:Vec5d;
	
	// endoscope motion angle to original position
	m_scopeJnt4CenterMotionAng :LREAL :=175*g_deg2Rad;
	m_scopeJnt5CenterMotionAng :LREAL :=150*g_deg2Rad;
	
	//instrument clamp error Id
	m_instruClampErrId : UINT;
	m_instruClampTime : LREAL;
	m_noCurrentTime : LREAL :=3;
	m_notReturnToZero : LREAL :=5;
	m_maxClampTime :LREAL :=0.5;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="calcCmdJntPos" Id="{106b8ce6-26fa-4bca-bfc9-20f8cdf00f0e}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntPos : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// return directly if instrument/endoscope is not readed
IF NOT(i_slaveArm.instrument.onChipData.m_InstruReadSucceed) THEN
	return;
END_IF

IF i_slaveArm.instrument.onChipData.m_InstruReadSucceed AND InstruType_endoscope = i_slaveArm.instrument.onChipData.m_InstruID THEN
	mountEndoscope(i_slaveArm);
ELSIF i_slaveArm.instrument.onChipData.m_InstruReadSucceed AND InstruType_NewEndoscope = i_slaveArm.instrument.onChipData.m_InstruID THEN
	mountNewEndoscope(i_slaveArm);
ELSIF i_slaveArm.instrument.onChipData.m_InstruReadSucceed AND (InstruType_UltrasoundKnifeS = i_slaveArm.instrument.m_instruType OR InstruType_UltrasoundKnifeU = i_slaveArm.instrument.m_instruType) THEN
	mountUltraKnife(i_slaveArm);
ELSE
	mountInstrument(i_slaveArm);
END_IF

// mount error detect;
m_instruClampErrId := instruClampStatus(i_slaveArm);]]></ST>
      </Implementation>
    </Method>
    <Method Name="calcCmdJntTrq" Id="{3dcdda2f-e476-49ce-befa-85e7b34cb17e}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntTrq : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR
VAR
	i :INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// set joint torque to zero in default
m_cmdJntTrq := g_zeroVec8d;

// clear instrument joint torque if  mount fail
IF m_instruClampErrId >0 THEN 
	FOR i:=4 TO 8 DO 
		m_jntOPMode[i] := DriverOPMode_Trq;
		m_cmdJntPos[i] := i_slaveArm.curJntPos[i];
		m_cmdJntTrq[i]:= i_slaveArm.curJntTrq[i]*0.8;
	END_FOR
	m_instruClampTime := m_instruClampTime + g_slaveArmCtrlCycleTime;
	m_isFinished := m_instruClampTime > m_maxClampTime;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{85ccbdcb-d27d-4162-a6ec-e8e93d30dbc6}">
      <Declaration><![CDATA[METHOD PUBLIC init : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm	:FB_SlaveArm;
END_VAR
VAR_IN_OUT 
	r_slaveArmCtrlCmd :ST_SlaveArmCtrlCmds;
END_VAR

VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check if to hold the command joint position unchanged
m_holdLastCmds := checkToHoldLastCmds(i_slaveArm);

SUPER^.Init(i_slaveArm,r_slaveArmCtrlCmd);
m_jntOPMode[4] := DriverOPMode_PosTrq;
m_jntOPMode[5] := DriverOPMode_PosTrq;
m_jntOPMode[6] := DriverOPMode_PosTrq;
m_jntOPMode[7] := DriverOPMode_PosTrq;
m_jntOPMode[8] := DriverOPMode_PosTrq;

FOR i:=1 TO 5 DO
	m_targetMountPos[i+3]:=m_cmdJntPos[i+3];
	m_jntOTG[i].init(m_targetMountPos[i+3], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
	m_jointMounted[i]:=FALSE;
END_FOR

// TODO
IF i_slaveArm.armIdx = 1 OR i_slaveArm.armIdx =3 THEN
	m_maxJntCurrentOldEndoScope[4] := 220.0;
	m_maxJntCurrentOldEndoScope[5] := 220.0;
END_IF

m_instruMountStatus:=0;
m_scopeMountStatus:=0;
m_ultrasoundMountStatus:=0;
m_instruClampErrId := 0;
m_instruClampTime := 0;
// update commands to arm
copyCmds(r_slaveArmCtrlCmd);

]]></ST>
      </Implementation>
    </Method>
    <Property Name="instruClampErrId" Id="{f1028432-c4d8-4b7e-a34b-a7a30fe5b17a}">
      <Declaration><![CDATA[PROPERTY instruClampErrId :  UINT]]></Declaration>
      <Get Name="Get" Id="{4e5cc1ce-1710-4380-ad0f-4115ae9409f8}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[instruClampErrId := m_instruClampErrId;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{56ab1d85-cf4e-42de-a283-3d8eae5dc1e6}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[m_instruClampErrId:=instruClampErrId; ]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="instruClampStatus" Id="{59da6779-a8b0-41c0-b6ac-feaa3bdf40f7}">
      <Declaration><![CDATA[METHOD instruClampStatus : UINT
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//m_instruClampErrId=1 instrumen clamp the current does not reach the set value
//m_instruClampErrId=2 instrumen clamp position does not return to zero
//m_instruClampErrId=3 instrumen can not be recongnized

IF i_slaveArm.instrument.onChipData.m_InstruReadSucceed THEN
	IF InstruType_endoscope = i_slaveArm.instrument.m_instruType THEN
		IF (m_scopeMountStatus=0 OR m_scopeMountStatus=1) AND m_timePeriod>=m_noCurrentTime  THEN
			instruClampStatus := 1;
		ELSIF m_scopeMountStatus=3 AND m_timePeriod>=m_notReturnToZero  THEN
			instruClampStatus := 2;
		END_IF
		
	ELSIF (InstruType_UltrasoundKnifeS = i_slaveArm.instrument.m_instruType OR InstruType_UltrasoundKnifeU = i_slaveArm.instrument.m_instruType) THEN
		IF (m_ultrasoundMountStatus=0) AND m_timePeriod>=m_noCurrentTime  THEN
			instruClampStatus := 1;
		ELSIF (m_ultrasoundMountStatus=3) AND m_timePeriod>=m_notReturnToZero  THEN
			instruClampStatus := 2;
		END_IF
			
	ELSE
		IF (m_instruMountStatus=0) AND m_timePeriod>=m_noCurrentTime  THEN
			instruClampStatus := 1;
		ELSIF (m_instruMountStatus=3) AND m_timePeriod>=m_notReturnToZero  THEN
			instruClampStatus := 2;
		END_IF
	END_IF

//ELSIF i_slaveArm.instrument.onChipData.m_Error = TRUE THEN
//	instruClampStatus:=3;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mountEndoscope" Id="{924322f0-f77b-4627-9090-85580b93061c}">
      <Declaration><![CDATA[METHOD mountEndoscope : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i :INT;
	curJntPos :Vec8d;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[curJntPos := i_slaveArm.curJntPos;

CASE m_scopeMountStatus OF
	//fix scope lock joint(joint 7)
	0:
		// other joints stay still
		FOR i:=1 TO 3 DO
			m_jointMounted[i] := TRUE;
			m_targetMountPos[i+3]:=curJntPos[i+3];
			m_jntOTG[i].init(m_targetMountPos[i+3], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
		END_FOR
	
		// check if buckled
		m_jointMounted[4]:=FALSE; 
		m_jointMounted[5]:=FALSE; 
		IF ABS(i_slaveArm.filtJntCurrent[7])> m_maxJntCurrentOldEndoScope[4] THEN 
			m_jointMounted[4]:=TRUE;
			m_targetMountPos[7]:=curJntPos[7];
			m_jntOTG[4].init(m_targetMountPos[7], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			m_scopeMountStatus:=1;
		ELSE
			m_targetMountPos[7]:=curJntPos[7]+m_mountMotionAng[4];
		END_IF

	1: // buckle scope rotate joint (joint 8)
		m_jointMounted[5]:=FALSE; 
		IF ABS(i_slaveArm.filtJntCurrent[8])> m_maxJntCurrentOldEndoScope[5] THEN 
			m_jointMounted[5]:=TRUE;
			m_targetMountPos[8]:=curJntPos[8];
			m_jntOTG[5].init(m_targetMountPos[8], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			m_scopeMountStatus:=2;
		ELSE
			m_targetMountPos[8]:=curJntPos[8]+m_mountMotionAng[5];
		END_IF
	

	2:// move back to zero position
		m_targetMountPos[7]:= curJntPos[7]-m_scopeJnt4CenterMotionAng;
		m_targetMountPos[8]:= curJntPos[8]-m_scopeJnt5CenterMotionAng;
		m_scopeMountStatus :=3;
		
		
	3:
		IF ABS(m_targetMountPos[7]-curJntPos[7]) <GVL_SlaveControlParameters.g_jntCtrlAngTolHigh AND 
				ABS(m_targetMountPos[8]-curJntPos[8]) <GVL_SlaveControlParameters.g_jntCtrlAngTolHigh THEN
			// record current joint position as offset for instrument
			i_slaveArm.instrument.initInstruJntPos(i_slaveArm.curJntPos);
			m_isFinished := TRUE;
		END_IF
		
END_CASE

// traj plan
FOR i:=1 TO 5 DO
	m_jntOTG[i].run(m_targetMountPos[i+3],0.0, o_cmdAcc=>m_cmdJntAcc[3+i],o_cmdVel=>m_cmdJntVel[3+i],o_cmdPos=>m_cmdJntPos[i+3]);
END_FOR


]]></ST>
      </Implementation>
    </Method>
    <Method Name="mountInstrument" Id="{cbdcc411-d3ae-4c70-8c1a-fbdc24e77583}">
      <Declaration><![CDATA[METHOD mountInstrument : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i :INT;
	curJntPos :Vec8d;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[curJntPos := i_slaveArm.curJntPos;

// joint4 stay still if instrument has only on finger
IF i_slaveArm.instrument.instruTypeInfo.m_isSingleFinger THEN
	m_jointMounted[1]:=TRUE;
END_IF

CASE m_instruMountStatus OF
	// To lock panel with instrument
	0:
		//buckle panel with instrument
		FOR i:=1 TO 4 DO
			// check if buckled 
			IF (i= 4 AND ABS(i_slaveArm.filtJntCurrent[i+3])> m_maxJntCurrent[i] AND ABS(i_slaveArm.curJntVel[i+3])<1.0*g_deg2Rad) 
				OR (i<> 4 AND ABS(i_slaveArm.filtJntCurrent[i+3])> m_maxJntCurrent[i] )THEN 
				m_jointMounted[i]:=TRUE;
			END_IF
			
			// set target joint position
			IF FALSE = m_jointMounted[i] THEN
					m_targetMountPos[i+3]:=curJntPos[i+3]-m_mountMotionAng[i];	
			ELSE
					m_targetMountPos[i+3]:=curJntPos[i+3];
					m_jntOTG[i].init(m_targetMountPos[i+3], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			END_IF
		END_FOR
		
		
		// check transition condition
		IF (m_jointMounted[1] AND m_jointMounted[2] AND m_jointMounted[3] AND m_jointMounted[4])  THEN
			IF i_slaveArm.instrument.onChipData.m_InstruReadSucceed THEN//Check whether the data is read successfully
				m_instruMountStatus:=1;
			END_IF
		END_IF
	
	1:// calculation deviates from the instrument zero position
		FOR i:=1 TO 4 DO
			m_instruZeroDeviation[i] :=  i_slaveArm.linkSingle[i+3] - i_slaveArm.instrument.onChipData.m_InstruPos[i];
		END_FOR
		m_instruMountStatus :=2;
	
	
	2:// move back to zero position
		FOR i:=1 TO 3 DO//J1-3
			IF m_instruZeroDeviation[i]>pi THEN
				m_instruZeroDeviation[i] := m_instruZeroDeviation[i] - 2*PI;
			ELSIF m_instruZeroDeviation[i]<-pi THEN
				m_instruZeroDeviation[i] := m_instruZeroDeviation[i] + 2*PI;
			END_IF
		END_FOR
		
		//joint4
		IF m_instruZeroDeviation[4]>0 AND m_instruZeroDeviation[4] < pi THEN
			m_instruZeroDeviation[4] := m_instruZeroDeviation[4] - 2*pi;
		ELSIF m_instruZeroDeviation[4]<0 AND m_instruZeroDeviation[4] > -pi THEN
			m_instruZeroDeviation[4] := m_instruZeroDeviation[4] + 2*pi;
		END_IF
		
		// set target joint position
		FOR i:=1 TO 4 DO
			m_targetMountPos[i+3]:=curJntPos[i+3] - m_instruZeroDeviation[i];
		END_FOR
		m_instruMountStatus :=3;
		
	3: // move to zero position
		m_instruMountStatus :=4;
		FOR i:=1 TO 4 DO 
			m_jntPosErr[i]:=m_targetMountPos[i+3]-curJntPos[i+3];
			m_linkSingleErr[i] := ABS( i_slaveArm.linkSingle[i+3] - i_slaveArm.instrument.onChipData.m_InstruPos[i]);
			m_linkSingleErr[i]:= MIN(m_linkSingleErr[i], g_2pi-m_linkSingleErr[i]);
			IF ABS(m_jntPosErr[i]) >5*GVL_SlaveControlParameters.g_jntCtrlAngTolLow OR 	ABS( m_linkSingleErr[i]) >5*g_deg2rad THEN
				m_instruMountStatus :=3;
				EXIT;
			END_IF
		END_FOR
	
	4:
		// record current joint position as offset for instrument
		i_slaveArm.instrument.initInstruJntPos(i_slaveArm.curJntPos);
		
		m_isFinished :=  TRUE;

END_CASE

// traj plan
FOR i:=1 TO 4 DO
	m_jntOTG[i].run(m_targetMountPos[i+3],0.0, o_cmdAcc=>m_cmdJntAcc[3+i],o_cmdVel=>m_cmdJntVel[3+i],o_cmdPos=>m_cmdJntPos[i+3]);
END_FOR


]]></ST>
      </Implementation>
    </Method>
    <Method Name="mountNewEndoscope" Id="{d8dcea3e-2325-4ece-8c44-dda179391b45}">
      <Declaration><![CDATA[METHOD mountNewEndoscope : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i :INT;
	curJntPos :Vec8d;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[curJntPos := i_slaveArm.curJntPos;

CASE m_scopeMountStatus OF
	//fix scope lock joint(joint 7)
	0:
		// other joints stay still
		FOR i:=1 TO 5 DO
			IF i = 1 OR i =2 OR i =5 THEN
				m_jointMounted[i] := TRUE;
				m_targetMountPos[i+3]:=curJntPos[i+3];
				m_jntOTG[i].init(m_targetMountPos[i+3], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			END_IF
		END_FOR
	
		// check if buckled
		m_jointMounted[3]:=FALSE; 
		m_jointMounted[4]:=FALSE; 
		FOR i:=3 TO 4 DO
			IF ABS(i_slaveArm.filtJntCurrent[i+3])> m_maxJntCurrent[i] THEN 
				m_jointMounted[i]:=TRUE;
				m_targetMountPos[i+3]:=curJntPos[i+3];
				m_jntOTG[i].init(m_targetMountPos[i+3], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
				
			ELSE
				m_targetMountPos[i+3]:=curJntPos[i+3]+m_mountMotionAng[i];
			END_IF
		END_FOR
		
		IF m_jointMounted[3] AND m_jointMounted[4] THEN
			m_scopeMountStatus:=1;
		END_IF
		

	1: // buckle scope rotate joint (joint 8)
		//m_jntOPMode[6] := DriverOPMode_Trq;
		m_instruZeroDeviation[4] :=  i_slaveArm.linkSingle[7] - i_slaveArm.instrument.onChipData.m_InstruPos[1];
		m_scopeMountStatus :=2;

	2:// move back to zero position
		
		//joint4
		IF m_instruZeroDeviation[4]>0 AND m_instruZeroDeviation[4] > pi THEN
			m_instruZeroDeviation[4] := m_instruZeroDeviation[4] - 2*pi;
		ELSIF m_instruZeroDeviation[4]<0 AND m_instruZeroDeviation[4] < -pi THEN
			m_instruZeroDeviation[4] := m_instruZeroDeviation[4] + 2*pi;
		END_IF
		
		m_targetMountPos[6]:=curJntPos[6] + m_instruZeroDeviation[4];
		m_targetMountPos[7]:=curJntPos[7] - m_instruZeroDeviation[4];
		m_scopeMountStatus :=3;
		
		
	3:
		m_isFinished := FALSE;
		IF ABS(m_targetMountPos[7]-curJntPos[7]) <GVL_SlaveControlParameters.g_jntCtrlAngTolHigh/2 THEN
			// record current joint position as offset for instrument
			i_slaveArm.instrument.initInstruJntPos(i_slaveArm.curJntPos);
			m_isFinished := TRUE;
		END_IF
		
END_CASE

// traj plan
FOR i:=1 TO 5 DO
	m_jntOTG[i].run(m_targetMountPos[i+3],0.0, o_cmdAcc=>m_cmdJntAcc[3+i],o_cmdVel=>m_cmdJntVel[3+i],o_cmdPos=>m_cmdJntPos[i+3]);
END_FOR

// joint6 output torque to help rotation motion
IF m_jntOPMode[6] = DriverOPMode_Trq THEN
	m_cmdJntTrq[6] := -0.5*i_slaveArm.cmdJntTrq[7];
END_IF



]]></ST>
      </Implementation>
    </Method>
    <Method Name="mountUltraKnife" Id="{6b01324c-5b90-4e88-a0ef-19a2c0251538}">
      <Declaration><![CDATA[METHOD mountUltraKnife : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i :INT;
	curJntPos :Vec8d;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[curJntPos := i_slaveArm.curJntPos;

m_jointMounted[1]:=TRUE;
m_jointMounted[2]:=TRUE;


CASE m_ultrasoundMountStatus OF 
	// To lock panel with instrument
	0:
		//buckle panel with instrument
		FOR i:=3 TO 5 DO
			// check if buckled 
			IF ABS(i_slaveArm.filtJntCurrent[i+3])> m_maxJntCurrent[i] THEN 
				m_jointMounted[i]:=TRUE;
				m_targetMountPos[i+3]:=curJntPos[i+3];
				m_jntOTG[i].init(m_targetMountPos[i+3], 0,m_instruMountVel, m_instruMountAcc, g_slaveArmCtrlCycleTime);
			END_IF
			
			// set target joint position
			IF FALSE = m_jointMounted[i] THEN
				IF i = 5 THEN
					m_targetMountPos[i+3]:=curJntPos[i+3]+m_mountMotionAng[i];
				ELSE
					m_targetMountPos[i+3]:=curJntPos[i+3]-m_mountMotionAng[i];
				END_IF
				
			END_IF
		END_FOR

		// check transition condition
		IF ( m_jointMounted[3] AND m_jointMounted[4] AND m_jointMounted[5] )  THEN
			IF i_slaveArm.instrument.onChipData.m_InstruReadSucceed THEN//Check whether the data is read successfully
				m_ultrasoundMountStatus:=1;
			END_IF
		END_IF

	1:
		//m_jntOPMode[8] := DriverOPMode_Trq;
		// calculation deviates from the instrument zero position
		m_instruZeroDeviation[3] :=  i_slaveArm.linkSingle[6] - i_slaveArm.instrument.onChipData.m_InstruPos[3]; //m_ultraKnifeRotaAngleJ3;
		m_instruZeroDeviation[4] :=  i_slaveArm.linkSingle[7] - m_ultraKnifeRotAngZeroPos;
		m_ultrasoundMountStatus :=2;
		
	2:// move back to zero position
		//joint3
		IF m_instruZeroDeviation[3] > 2*pi THEN
			m_instruZeroDeviation[3] := m_instruZeroDeviation[3] - 2*pi  ;
		ELSIF  m_instruZeroDeviation[3] < -pi THEN
			m_instruZeroDeviation[3] := 2*pi + m_instruZeroDeviation[3] ;
		END_IF
		//joint4
		IF m_instruZeroDeviation[4]>0 AND m_instruZeroDeviation[4] < pi THEN
			m_instruZeroDeviation[4] := m_instruZeroDeviation[4] - 2*pi;
		ELSIF m_instruZeroDeviation[4]<0 AND m_instruZeroDeviation[4] > -pi THEN
			m_instruZeroDeviation[4] := m_instruZeroDeviation[4] + 2*pi;
		END_IF
	
		// set target joint position
		m_targetMountPos[6]:=curJntPos[6] - m_instruZeroDeviation[3];
		//m_targetMountPos[6]:=curJntPos[6] + m_ultraKnifeRotaAngleJ3;
		m_targetMountPos[7]:=curJntPos[7] - m_instruZeroDeviation[4];
		m_targetMountPos[8]:=curJntPos[8] - m_instruZeroDeviation[4];

		m_ultrasoundMountStatus :=3;

	3:
		// joint8 in passive mode
		m_jntOPMode[8] := DriverOPMode_Trq;
		
		m_isFinished:=TRUE;
		FOR i:=3 TO 4 DO 
			m_jntPosErr[i]:=m_targetMountPos[i+3]-curJntPos[i+3];
			IF ABS(m_jntPosErr[i]) >GVL_SlaveControlParameters.g_jntCtrlAngTolLow  THEN
				m_isFinished := FALSE;
				EXIT;
			END_IF
		END_FOR	
		
		// record current joint position as offset for instrument
		i_slaveArm.instrument.initInstruJntPos(i_slaveArm.curJntPos);

END_CASE


// traj plan
FOR i:=1 TO 5 DO
	m_jntOTG[i].run(m_targetMountPos[i+3],0.0, o_cmdAcc=>m_cmdJntAcc[3+i],o_cmdVel=>m_cmdJntVel[3+i],o_cmdPos=>m_cmdJntPos[i+3]);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SlaveCtrlMountInstru">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlMountInstru.calcCmdJntPos">
      <LineId Id="614" Count="0" />
      <LineId Id="549" Count="4" />
      <LineId Id="575" Count="7" />
      <LineId Id="573" Count="0" />
      <LineId Id="627" Count="1" />
      <LineId Id="603" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlMountInstru.calcCmdJntTrq">
      <LineId Id="229" Count="1" />
      <LineId Id="228" Count="0" />
      <LineId Id="218" Count="1" />
      <LineId Id="231" Count="1" />
      <LineId Id="246" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="225" Count="2" />
      <LineId Id="53" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlMountInstru.init">
      <LineId Id="239" Count="14" />
      <LineId Id="274" Count="4" />
      <LineId Id="273" Count="0" />
      <LineId Id="254" Count="8" />
      <LineId Id="92" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlMountInstru.instruClampErrId.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlMountInstru.instruClampErrId.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlMountInstru.instruClampStatus">
      <LineId Id="3" Count="1" />
      <LineId Id="32" Count="1" />
      <LineId Id="6" Count="21" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlMountInstru.mountEndoscope">
      <LineId Id="104" Count="57" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlMountInstru.mountInstrument">
      <LineId Id="695" Count="13" />
      <LineId Id="823" Count="0" />
      <LineId Id="709" Count="0" />
      <LineId Id="712" Count="3" />
      <LineId Id="717" Count="0" />
      <LineId Id="824" Count="2" />
      <LineId Id="722" Count="38" />
      <LineId Id="805" Count="0" />
      <LineId Id="762" Count="3" />
      <LineId Id="821" Count="1" />
      <LineId Id="766" Count="0" />
      <LineId Id="768" Count="18" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlMountInstru.mountNewEndoscope">
      <LineId Id="93" Count="47" />
      <LineId Id="175" Count="0" />
      <LineId Id="141" Count="24" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlMountInstru.mountUltraKnife">
      <LineId Id="296" Count="86" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>