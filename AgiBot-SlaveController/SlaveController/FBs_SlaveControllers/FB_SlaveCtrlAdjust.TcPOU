<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_SlaveCtrlAdjust" Id="{065dc40e-4d51-49bc-8f28-94a80cbbd0fd}" SpecialFunc="None">
    <Declaration><![CDATA[// Brief: Slave Arm Adjust
FUNCTION_BLOCK PUBLIC FB_SlaveCtrlAdjust EXTENDS FB_SlaveArmCtrlBase
VAR
	// velocity for full damping
	m_maxAdjustVel :Vec3d := [1.2, 1.2, 0.3];
	
	// velocity start to enable damping
	m_velLBForDamp :Vec3d := [0.7, 0.7, 0.1];
	
	// max damp
	m_maxDamp :Vec3d := [1,1,100];//50, 50, 500
	
	// distance buffer from joint limit to start damp
	m_limitBufferForDamp :Vec3d :=[20*g_deg2Rad, 20*g_deg2Rad, 0.03];
	
	// joint velocity threshold for coulomb friction transition
	m_cFrictionVelThres : LREAL := 5.0 * g_deg2Rad;
	m_frictionCompScale :LREAL :=0.1;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="calcCmdJntPos" Id="{702c20a9-7bcc-49ed-9f8d-b2e61f393510}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntPos : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR
VAR
	i:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:= 1 TO 8 DO
	IF m_jntOPMode[i] = DriverOPMode_Trq THEN
		m_cmdJntPos[i]:=i_slaveArm.curJntPos[i];
	END_IF
END_FOR

m_cmdCartPose:=i_slaveArm.curCartPose;]]></ST>
      </Implementation>
    </Method>
    <Method Name="calcCmdJntTrq" Id="{fcf0acdf-cfca-4de6-b628-f0f18f7171ce}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntTrq : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR
VAR
	i :INT;
	dampScale :LREAL;
	limitDis:LREAL;
	transitScale:LREAL;
	cFriction:LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// set joint torque to zero in default
m_cmdJntTrq := g_zeroVec8d;

// enable endoscope rotation joint if external torque exceed specific value
IF i_slaveArm.instrument.onChipData.m_InstruReadSucceed AND i_slaveArm.instrument.instruType = InstruType_Endoscope THEN
		FOR i:=6 TO 8 DO 
			IF ABS(i_slaveArm.filtJntCurrent[i]) > 100 THEN
				m_jntOPMode[i]:=DriverOPMode_Trq;
			END_IF
		END_FOR
END_IF

// add damp near joint limit
FOR i:=1 TO 3 DO
	IF (i_slaveArm.curJntPos[i] > GVL_SlaveMotorParameters.g_maxDHJntPos[i] - m_limitBufferForDamp[i] AND  i_slaveArm.curJntVel[i]> 0 ) 
		OR (i_slaveArm.curJntPos[i] < GVL_SlaveMotorParameters.g_minDHJntPos[i] + m_limitBufferForDamp[i] AND  i_slaveArm.curJntVel[i]<0 )  THEN
		limitDis := MIN(GVL_SlaveMotorParameters.g_maxDHJntPos[i] - i_slaveArm.curJntPos[i], i_slaveArm.curJntPos[i]-GVL_SlaveMotorParameters.g_minDHJntPos[i]);
		dampScale  :=LIMIT(0, 1-limitDis/m_limitBufferForDamp[i],1);
		m_cmdJntTrq[i]:= -dampScale * m_maxDamp[i] * i_slaveArm.curJntVel[i];
	END_IF
	
END_FOR

// compute damp
FOR i:=1 TO 3 DO
	IF ABS(i_slaveArm.curJntVel[i]) > m_velLBForDamp[i] THEN 
		dampScale:=LIMIT(0, (ABS(i_slaveArm.curJntVel[i])- m_velLBForDamp[i])/(m_maxAdjustVel[i] - m_velLBForDamp[i]), 1 );
		m_cmdJntTrq[i] :=m_cmdJntTrq[i] -i_slaveArm.curJntVel[i] * m_maxDamp[i] * dampScale;
	END_IF
END_FOR

//add friction compensation for joint4
FOR i:=1 TO 2 DO
	transitScale := LIMIT(0, ABS(i_slaveArm.curJntVel[i]/m_cFrictionVelThres),1);
	cFriction:= transitScale * sign(i_slaveArm.curJntVel[i]) * GVL_SlaveArmDynamics.g_slaveJntFriction[i_slaveArm.armIdx,i];
	m_cmdJntTrq[i]:= m_cmdJntTrq[i]+m_frictionCompScale*cFriction;
END_FOR


]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{0b0d07b9-f0c8-4405-b76e-2338c9ecb922}">
      <Declaration><![CDATA[METHOD PUBLIC init : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm	:FB_SlaveArm;
END_VAR
VAR_IN_OUT 
	r_slaveArmCtrlCmd :ST_SlaveArmCtrlCmds;
END_VAR
VAR
	i :INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check if to hold the command joint position unchanged
m_holdLastCmds := checkToHoldLastCmds(i_slaveArm);

//init
SUPER^.Init(i_slaveArm,r_slaveArmCtrlCmd);

// disable joints if this joint is an unrecoverable failure
FOR i:=1 TO g_sJntNum DO
	IF SafetyCheck.m_SafetyCheck.m_jntErrFlag[i_slaveArm.armIdx, 0, 3] OR  SafetyCheck.m_SafetyCheck.m_jntErrFlag[i_slaveArm.armIdx, i+g_setupJntNum, 3] THEN
		m_jntEnableFlag[i] := 0;
	ELSE
		m_jntEnableFlag[i] := 1;
	END_IF
END_FOR

// joint 1/2/3/7 run in torque mode
m_jntOPMode[1]:=DriverOPMode_Trq;
m_jntOPMode[2]:=DriverOPMode_Trq;
m_jntOPMode[3]:=DriverOPMode_Trq;
m_jntOPMode[4]:=DriverOPMode_PosTrq;
m_jntOPMode[5]:=DriverOPMode_PosTrq;
m_jntOPMode[6]:=DriverOPMode_PosTrq;
m_jntOPMode[7]:=DriverOPMode_PosTrq;
m_jntOPMode[8]:=DriverOPMode_PosTrq;

IF i_slaveArm.instrument.onChipData.m_InstruReadSucceed THEN
	IF i_slaveArm.instrument.instruType <> InstruType_Endoscope THEN
		m_jntOPMode[7]:=DriverOPMode_Trq;
	END_IF
END_IF

// hold joint3 if instrument mount failed
IF i_slaveArm.instruOn AND NOT(SlaveArmControl.m_slaveRobot.m_instrumentMountedFlag[i_slaveArm.armIdx]) THEN
	m_jntOPMode[3]:=DriverOPMode_PosTrq;
END_IF

// update commands to arm
copyCmds(r_slaveArmCtrlCmd);
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SlaveCtrlAdjust">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlAdjust.calcCmdJntPos">
      <LineId Id="147" Count="5" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlAdjust.calcCmdJntTrq">
      <LineId Id="217" Count="0" />
      <LineId Id="259" Count="8" />
      <LineId Id="175" Count="0" />
      <LineId Id="185" Count="18" />
      <LineId Id="232" Count="1" />
      <LineId Id="239" Count="0" />
      <LineId Id="242" Count="1" />
      <LineId Id="240" Count="1" />
      <LineId Id="236" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="53" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlAdjust.init">
      <LineId Id="231" Count="37" />
      <LineId Id="12" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>