<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_SlaveCtrlArmCali" Id="{3cf21892-e263-450c-90d1-781538ddcb8e}" SpecialFunc="None">
    <Declaration><![CDATA[// Brief: Slave Arm Adjust
FUNCTION_BLOCK PUBLIC FB_SlaveCtrlArmCali EXTENDS FB_SlaveArmCtrlBase
VAR
	m_lastLinkEncoder :ARRAY [1..3] OF DINT;
	
	//link encoder calibration timer
	m_linkEncPosFristCaliTon :ARRAY [1..3] OF TON;
	m_linkEncPosSecondCaliTon :ARRAY [1..3] OF TON;
	m_linkEncPosHomeCaliTon :ARRAY [1..3] OF TON;
	
	//link encoder calibration tigger time
	m_caliTime : TIME:= T#3S;
	
	//joint link zero crossing or not
	m_linkZeroCrossOrNot : Vec8i;
	
	linkLimitFristPos : ARRAY [1..4] OF Vec8di;
	linkLimitSecondPos : ARRAY [1..4] OF Vec8di;
	
	m_maxJntCurrent :Vec5d := [120, 120, 120, 120, 120];
	
	m_powerBoxCaliTime : LREAL;
	
	m_jointMounted :ARRAY[1..5] OF BOOL := [5(FALSE)];
	m_current : Vec5d;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="calcCmdJntPos" Id="{73d47bc3-ba2e-421d-8819-f86c38a4d122}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntPos : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR
VAR
	i:INT;
	armIdx : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[armIdx := i_slaveArm.armIdx;
FOR i:= 1 TO 3 DO
	IF m_jntOPMode[i] = DriverOPMode_Trq THEN
		m_cmdJntPos[i]:=i_slaveArm.curJntPos[i];
	END_IF
	
	//determine link encoder cross zero
	IF ABS(i_slaveArm.m_joints[i].m_motorInputs.m_linkEncoder - m_lastLinkEncoder[i]) > GVL_SlaveMotorParameters.g_absEncoderRes[m_armIdx, i] /2 THEN
		 GVL_armCali.g_linkZeroCrossOrNot[armIdx][i+5] :=1;
	END_IF
	m_lastLinkEncoder[i] := i_slaveArm.m_joints[i].m_motorInputs.m_linkEncoder;
	
	//link encoder calibration 
	m_linkEncPosFristCaliTon[i](IN:= GVL_armCali.g_linkEncFristPosCali[armIdx][i+5], PT:= m_caliTime, Q=>  GVL_armCali.g_linkEncFristCaliTrigger[armIdx][i+5], ET=> );
	m_linkEncPosSecondCaliTon[i](IN:=  GVL_armCali.g_linkEncSecondPosCali[armIdx][i+5], PT:= m_caliTime, Q=>  GVL_armCali.g_linkEncSecondCaliTrigger[armIdx][i+5], ET=> );
	m_linkEncPosHomeCaliTon[i](IN:=  GVL_armCali.g_linkEncHomePosCali[armIdx][i+5], PT:= m_caliTime, Q=>  GVL_armCali.g_linkEncHomePosCaliTrigger[armIdx][i+5], ET=> );
	IF  GVL_armCali.g_linkEncFristCaliTrigger[armIdx][i+5] THEN
		linkLimitFristPos[armIdx][i+5] := i_slaveArm.m_joints[i].m_motorInputs.m_linkEncoder;
		IF linkLimitFristPos[armIdx][i+5] < linkLimitSecondPos[armIdx][i+5] THEN
			GVL_armCali.g_linkLimitFristPos[armIdx][i+5] := linkLimitFristPos[armIdx][i+5];
			GVL_armCali.g_linkLimitSecondPos[armIdx][i+5] := linkLimitSecondPos[armIdx][i+5];
		ELSE
			GVL_armCali.g_linkLimitFristPos[armIdx][i+5] := linkLimitSecondPos[armIdx][i+5];
			GVL_armCali.g_linkLimitSecondPos[armIdx][i+5] := linkLimitFristPos[armIdx][i+5];
		END_IF
	ELSIF  GVL_armCali.g_linkEncSecondCaliTrigger[armIdx][i+5] THEN
		linkLimitSecondPos[armIdx][i+5] := i_slaveArm.m_joints[i].m_motorInputs.m_linkEncoder;
		IF linkLimitFristPos[armIdx][i+5] < linkLimitSecondPos[armIdx][i+5] THEN
			GVL_armCali.g_linkLimitFristPos[armIdx][i+5] := linkLimitFristPos[armIdx][i+5];
			GVL_armCali.g_linkLimitSecondPos[armIdx][i+5] := linkLimitSecondPos[armIdx][i+5];
		ELSE
			GVL_armCali.g_linkLimitFristPos[armIdx][i+5] := linkLimitSecondPos[armIdx][i+5];
			GVL_armCali.g_linkLimitSecondPos[armIdx][i+5] := linkLimitFristPos[armIdx][i+5];
		END_IF
		 
	ELSIF  GVL_armCali.g_linkEncHomePosCaliTrigger[armIdx][i+5] THEN
		 GVL_armCali.g_linkHomePos[armIdx][i+5] := i_slaveArm.m_joints[i].m_motorInputs.m_linkEncoder;
	END_IF
	
	
	
END_FOR



]]></ST>
      </Implementation>
    </Method>
    <Method Name="calcCmdJntTrq" Id="{ecb459d3-a4c6-499b-b31e-8c02a930a5fb}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntTrq : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR
VAR
	i :INT;
	armIdx : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[armIdx := i_slaveArm.armIdx;
// set joint torque to zero in default
m_cmdJntTrq := g_zeroVec8d;

FOR i := 1 TO 3 DO
	IF GVL_armCali.g_jointIntoCaliState[i_slaveArm.armIdx][i+5] THEN
		m_jntEnableFlag[i] := 1;
		m_jntOPMode[i]:=DriverOPMode_Trq;
	ELSE
		m_jntEnableFlag[i] := 0;
		m_jntOPMode[i]:=DriverOPMode_Pos;
	END_IF
END_FOR

FOR i := 1 TO 5 DO
	m_current[i] :=ABS(i_slaveArm.filtJntCurrent[i+3]);
	IF GVL_armCali.g_powerBoxCali[armIdx] THEN
		m_jntEnableFlag[i+3] := 1;
		m_jntOPMode[i+3]:=DriverOPMode_Trq;
		m_cmdJntTrq[i+3] := 150.0/ i_slaveArm.m_joints[i+3].m_trq2CurrentRatio;
		IF m_current[i]> m_maxJntCurrent[i] THEN
			m_jointMounted[i] := TRUE;
			GVL_armCali.g_powerBoxLinkHomePos[armIdx][i] := i_slaveArm.m_joints[i+3].m_motorInputs.m_linkEncoder;
			
		END_IF
		
	ELSE
		m_jointMounted[i] := FALSE;
		m_powerBoxCaliTime := 0;
	END_IF
END_FOR

IF (m_jointMounted[1] AND m_jointMounted[2] AND m_jointMounted[3] AND m_jointMounted[4] AND m_jointMounted[5]) THEN
	GVL_armCali.g_powerBoxCalicomplete[armIdx] := TRUE;
	m_powerBoxCaliTime := m_powerBoxCaliTime + GVL_SystemParameters.g_slaveArmCtrlCycleTime;
	IF m_powerBoxCaliTime > 3.0 THEN
		GVL_armCali.g_powerBoxCali[armIdx]:= FALSE;
	END_IF
ELSE
	GVL_armCali.g_powerBoxCalicomplete[armIdx] := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{42fdd78c-b96f-4685-a3e8-6aa21d39fc38}">
      <Declaration><![CDATA[METHOD PUBLIC init : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm	:FB_SlaveArm;
END_VAR
VAR_IN_OUT 
	r_slaveArmCtrlCmd :ST_SlaveArmCtrlCmds;
END_VAR
VAR
	i :INT;
	armId :INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[armId := i_slaveArm.armIdx;
// check if to hold the command joint position unchanged
m_holdLastCmds := checkToHoldLastCmds(i_slaveArm);

//init
SUPER^.Init(i_slaveArm,r_slaveArmCtrlCmd);
m_jntEnableFlag :=g_zeroVec8i;
FOR i := 1 TO 3 DO
	GVL_armCali.g_linkZeroCrossOrNot[armId][i+5] :=0;
	m_lastLinkEncoder[i] := i_slaveArm.m_joints[i].m_motorInputs.m_linkEncoder;
END_FOR

linkLimitFristPos[armId] := g_zeroVec8di;
linkLimitSecondPos[armId] := g_zeroVec8di;
// update commands to arm
copyCmds(r_slaveArmCtrlCmd);
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SlaveCtrlArmCali">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlArmCali.calcCmdJntPos">
      <LineId Id="165" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="114" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="180" Count="3" />
      <LineId Id="179" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="162" Count="1" />
      <LineId Id="139" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="207" Count="5" />
      <LineId Id="206" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="202" Count="3" />
      <LineId Id="187" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="152" Count="1" />
      <LineId Id="141" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="136" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlArmCali.calcCmdJntTrq">
      <LineId Id="290" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="231" Count="2" />
      <LineId Id="250" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="236" Count="1" />
      <LineId Id="53" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="312" Count="1" />
      <LineId Id="265" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="269" Count="3" />
      <LineId Id="288" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="280" Count="1" />
      <LineId Id="308" Count="0" />
      <LineId Id="310" Count="1" />
      <LineId Id="309" Count="0" />
      <LineId Id="286" Count="1" />
      <LineId Id="282" Count="0" />
      <LineId Id="279" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlArmCali.init">
      <LineId Id="221" Count="0" />
      <LineId Id="157" Count="4" />
      <LineId Id="204" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="205" Count="1" />
      <LineId Id="219" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="187" Count="2" />
      <LineId Id="12" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>