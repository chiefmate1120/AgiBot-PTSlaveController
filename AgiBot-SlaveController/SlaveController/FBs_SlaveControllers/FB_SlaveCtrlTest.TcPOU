<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_SlaveCtrlTest" Id="{76094af6-c59a-4d5e-806f-e1a9a8163bb7}" SpecialFunc="None">
    <Declaration><![CDATA[// Brief: Slave Arm test
FUNCTION_BLOCK PUBLIC FB_SlaveCtrlTest EXTENDS FB_SlaveArmCtrlBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
// ################ variables for single DH  joint test ##################
	m_enableFrictionComp :BOOL :=false;
	m_freqTestFlag :BOOL:=FALSE;
	m_initJntPos :Vec8d;
	m_initDHJntPos :Vec6d;
	m_cmdDHJntPos :Vec6d;
	m_cmdDHJntVel :Vec6d;
	m_jntMotionFreq :Vec6d :=[0.2, 0.2, 0.1, 3(0.1)];
	m_jntMotionRange :Vec6d :=[pi/6, pi/6, 0.1, 3(pi/6)];
	m_testJntIdx :INT :=1;
	m_gripperAngle : LREAL :=0;
	m_gripForceLevel :LREAL :=0;
	m_lastCmdJntPos :Vec8d ;
	
	m_stepTestFlag :BOOL :=FALSE;
	m_jntStep : LREAL := 5*g_deg2Rad;
	
	// instrument controller
	m_instruController : FB_BasicInstruControl;
	m_instruCmdJntPos,m_instruCmdJntVel : Vec5d;
	m_instruCmdJntTrq :Vec5d;
	
	
	m_errCmdPos, m_errCurPos :LREAL;
	m_errPosIdx : INT;
	
	m_constVelTestFlag :BOOL :=FALSE;
	m_jntMotionOTG :ARRAY[1..8] OF FB_secOrdTrajFilter;
	m_maxJntAcc :ARRAY[1..8] OF LREAL :=[1, 1, 0.5, 5(2)];
	m_maxJntVel :ARRAY[1..8] OF LREAL :=[0.2, 0.2, 0.3, 5(1)];
	m_jntPosUb :ARRAY[1..8] OF LREAL :=[45*g_deg2rad, -1.57 + 45*g_deg2rad, 0.5, 5(pi)];
	m_jntPosLb :ARRAY[1..8] OF LREAL :=[-45*g_deg2rad, -1.57 -45*g_deg2rad, 0.3, 5(-pi)];
	m_OTGTargetPos :ARRAY[1..8] OF LREAL ;
	
	m_constVelTestFlag2 :BOOL :=FALSE;
	m_jntPosRange :ARRAY[1..8] OF LREAL :=[10*g_deg2rad, 10*g_deg2rad, 0.05, 5(0.5*pi)];
	
	
	// instrument rotation test
	m_instruRotTest :BOOL :=FALSE;
	m_instruRotOTG : FB_secOrdTrajFilter;
	m_slaveOriginPose : ST_Frame;
	m_slaveCmdPose : ST_Frame;
	m_instruRotAxis :Vec3d := [0, 0, 1];
	
	// friciton test
	m_staticFrictionTest : BOOL := FALSE;
	m_colFrictionTest :BOOL :=FALSE;
	
	// z-axis track variables
	m_zTrackFlag:BOOL :=false;
	m_cmdZAxis :Vec3d :=[0,0,1];
	m_cmdZTrackKp :LREAL := 200;
	m_cmdZTrackMaxV :LREAL := 30*g_deg2Rad;
	m_cmdZTrackMaxA :LREAL :=PI;
	
	
	// CTC PID
	m_CTCCtrl : FB_SlaveCTControl;
	m_CTCTestFlag :BOOL :=FALSE;
	
	
//####################################################################

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="calcCmdJntPos" Id="{028477f9-0758-4c7a-9ed5-09b50021bf99}">
      <Declaration><![CDATA[METHOD PROTECTED calcCmdJntPos : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i:INT :=0;
	errThres :LREAL;
	m_masterGripAngle: INT;
	instruRotAng:REAL;
	instruRotMat:Mat3d;
	slavePosErr:Vec3d;
	tmpMat3d:Mat3d;
	slaveRotErr :Mat3d;
	errAngle:LREAL;
	errAxisLocal,errAxis:Vec3d;
	slaveCmdVel, slaveCmdWVel:Vec3d;
	slaveTrackTwist:Vec6d;
	cmdVelScale :REAL:=1;
	invJaco :Mat6d;
	simDHJointVel:Vec6d;
	DHJntCmdDeltaPos:Vec6d;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF i_slaveArm.instruOn THEN
	IF m_zTrackFlag THEN
		calcCmdJntPos_zTrack(i_endoscopePose,i_masterStatus,i_setupStatus,i_slaveArm);
	ELSE
		calcCmdJntPos_withInstru(i_endoscopePose,i_masterStatus,i_setupStatus,i_slaveArm);
	END_IF
	
ELSE
	calcCmdJntPos_CTC(i_endoscopePose,i_masterStatus,i_setupStatus,i_slaveArm);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="calcCmdJntPos_CTC" Id="{91007c31-26f3-4e59-a4ae-bc4cf4c461af}">
      <Declaration><![CDATA[METHOD PROTECTED calcCmdJntPos_CTC : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i:INT :=0;
	errThres :LREAL;
	m_masterGripAngle: INT;
	instruRotAng:REAL;
	instruRotMat:Mat3d;
	slavePosErr:Vec3d;
	tmpMat3d:Mat3d;
	slaveRotErr :Mat3d;
	errAngle:LREAL;
	errAxisLocal,errAxis:Vec3d;
	slaveCmdVel, slaveCmdWVel:Vec3d;
	slaveTrackTwist:Vec6d;
	cmdVelScale :REAL:=1;
	invJaco :Mat6d;
	simDHJointVel:Vec6d;
	DHJntCmdDeltaPos:Vec6d;
	
	ctcTrq:Vec3d;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Just for joint controller test
IF m_testJntIdx >=1 AND m_testJntIdx <=8 THEN
	IF m_freqTestFlag THEN 
		m_cmdJntPos[m_testJntIdx]:=m_initJntPos[m_testJntIdx]+m_jntMotionRange[m_testJntIdx]/2
										+0.5*m_jntMotionRange[m_testJntIdx]*SIN(2*pi*m_jntMotionFreq[m_testJntIdx]*m_timePeriod-pi/2);
		m_cmdJntVel[m_testJntIdx]:=0.5*m_jntMotionRange[m_testJntIdx]*2*pi*m_jntMotionFreq[m_testJntIdx]*COS(2*pi*m_jntMotionFreq[m_testJntIdx]*m_timePeriod-pi/2);
	ELSIF m_stepTestFlag THEN
		m_cmdJntPos[m_testJntIdx]:=m_initJntPos[m_testJntIdx]+m_jntStep;
	ELSIF m_colFrictionTest THEN
		m_cmdJntPos[m_testJntIdx]:=m_cmdJntPos[m_testJntIdx]- g_slaveArmCtrlCycleTime * 45*g_deg2rad;
	ELSIF m_staticFrictionTest THEN
		m_jntOPMode[m_testJntIdx] := DriverOPMode_Trq;
		m_cmdJntTrq[m_testJntIdx]:=m_cmdJntTrq[m_testJntIdx] + g_slaveArmCtrlCycleTime*2/1000.0*GVL_SlaveMotorParameters.g_motorTrqConst[i_slaveArm.armIdx,m_testJntIdx]*GVL_SlaveMotorParameters.g_motorReduction[i_slaveArm.armIdx,m_testJntIdx];
		m_cmdJntPos[m_testJntIdx]:=i_slaveArm.curJntPos[m_testJntIdx];
		IF ABS(i_slaveArm.curJntVel[m_testJntIdx])>5*g_deg2rad THEN
			m_jntOPMode[m_testJntIdx] := DriverOPMode_PosTrq;
			m_staticFrictionTest:=FALSE;
		END_IF
	ELSIF m_constVelTestFlag THEN
		IF m_cmdJntPos[m_testJntIdx]> m_jntPosUb[m_testJntIdx]- 0.001 AND m_timePeriod > 10 THEN
			m_OTGTargetPos[m_testJntIdx]:=m_jntPosLb[m_testJntIdx];
			m_timePeriod :=0;
		ELSIF m_cmdJntPos[m_testJntIdx]< m_jntPosLb[m_testJntIdx]+ 0.001 AND m_timePeriod > 10 THEN
			m_OTGTargetPos[m_testJntIdx]:=m_jntPosUb[m_testJntIdx];
			m_timePeriod :=0;
		END_IF
		m_jntMotionOTG[m_testJntIdx].run(m_OTGTargetPos[m_testJntIdx],0, o_cmdAcc=>, o_cmdVel =>m_cmdJntVel[m_testJntIdx], o_cmdPos =>m_cmdJntPos[m_testJntIdx]);
	ELSIF m_constVelTestFlag2 THEN
		IF m_cmdJntPos[m_testJntIdx]> m_initJntPos[m_testJntIdx] + m_jntPosRange[m_testJntIdx]- 0.001 AND m_timePeriod > 10 THEN
			m_OTGTargetPos[m_testJntIdx]:=m_initJntPos[m_testJntIdx] + m_jntPosRange[m_testJntIdx];
			m_timePeriod :=0;
		ELSIF m_cmdJntPos[m_testJntIdx]< m_initJntPos[m_testJntIdx] - m_jntPosRange[m_testJntIdx]+ 0.001 AND m_timePeriod > 10 THEN
			m_OTGTargetPos[m_testJntIdx]:=m_initJntPos[m_testJntIdx] - m_jntPosRange[m_testJntIdx];
			m_timePeriod :=0;
		END_IF
		m_jntMotionOTG[m_testJntIdx].run(m_OTGTargetPos[m_testJntIdx],0, o_cmdAcc=>, o_cmdVel =>m_cmdJntVel[m_testJntIdx], o_cmdPos =>m_cmdJntPos[m_testJntIdx]);
	ELSE
		m_jntOPMode[m_testJntIdx] := DriverOPMode_PosTrq;
		m_timePeriod:=0;
		m_cmdJntTrq[m_testJntIdx]:=0;
		m_jntMotionOTG[m_testJntIdx].init(i_slaveArm.curJntPos[m_testJntIdx], 0,m_maxJntVel[m_testJntIdx], m_maxJntAcc[m_testJntIdx], g_slaveArmCtrlCycleTime);
	END_IF
	
END_IF
IF m_CTCTestFlag THEN
	m_jntOPMode[1] := DriverOPMode_Trq;
	m_jntOPMode[2] := DriverOPMode_Trq;
	m_jntOPMode[3] := DriverOPMode_Trq;
	m_CTCCtrl.run(i_slaveArm, m_cmdJntPos, m_cmdJntVel ,o_cmdJntTrq=>ctcTrq);
	m_cmdJntTrq[1]:= ctcTrq[1];
	m_cmdJntTrq[2]:= ctcTrq[2];
	m_cmdJntTrq[3]:= ctcTrq[3];
ELSE
	m_jntOPMode[1] := DriverOPMode_PosTrq;
	m_jntOPMode[2] := DriverOPMode_PosTrq;
	m_jntOPMode[3] := DriverOPMode_PosTrq;
END_IF



m_lastCmdJntPos:=m_cmdJntPos;

FOR i:=1 TO 3 DO 
	IF i=3 THEN
		errThres := 0.01;
	ELSE
		errThres :=5*g_deg2rad;
	END_IF
	
	IF ABS(m_cmdJntPos[i]-i_slaveArm.curJntPos[i])>errThres THEN
		m_isFinished:=TRUE;
		m_errPosIdx:=i;
		m_errCmdPos:=m_cmdJntPos[i];
		m_errCurPos :=i_slaveArm.curJntPos[i];
	END_IF
	
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="calcCmdJntPos_noInstru" Id="{2ad70e23-4725-495b-a6ea-679b378471ba}">
      <Declaration><![CDATA[METHOD PROTECTED calcCmdJntPos_noInstru : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i:INT :=0;
	errThres :LREAL;
	m_masterGripAngle: INT;
	instruRotAng:REAL;
	instruRotMat:Mat3d;
	slavePosErr:Vec3d;
	tmpMat3d:Mat3d;
	slaveRotErr :Mat3d;
	errAngle:LREAL;
	errAxisLocal,errAxis:Vec3d;
	slaveCmdVel, slaveCmdWVel:Vec3d;
	slaveTrackTwist:Vec6d;
	cmdVelScale :REAL:=1;
	invJaco :Mat6d;
	simDHJointVel:Vec6d;
	DHJntCmdDeltaPos:Vec6d;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Just for joint controller test
IF m_testJntIdx >=1 AND m_testJntIdx <=8 THEN
	IF m_freqTestFlag THEN 
		m_cmdJntPos[m_testJntIdx]:=m_initJntPos[m_testJntIdx]+m_jntMotionRange[m_testJntIdx]/2
										+0.5*m_jntMotionRange[m_testJntIdx]*SIN(2*pi*m_jntMotionFreq[m_testJntIdx]*m_timePeriod-pi/2);
		m_cmdJntVel[m_testJntIdx]:=0.5*m_jntMotionRange[m_testJntIdx]*2*pi*m_jntMotionFreq[m_testJntIdx]*COS(2*pi*m_jntMotionFreq[m_testJntIdx]*m_timePeriod-pi/2);
	ELSIF m_stepTestFlag THEN
		m_cmdJntPos[m_testJntIdx]:=m_initJntPos[m_testJntIdx]+m_jntStep;
	ELSIF m_colFrictionTest THEN
		m_cmdJntPos[m_testJntIdx]:=m_cmdJntPos[m_testJntIdx]- g_slaveArmCtrlCycleTime * 45*g_deg2rad;
	ELSIF m_staticFrictionTest THEN
		m_jntOPMode[m_testJntIdx] := DriverOPMode_Trq;
		m_cmdJntTrq[m_testJntIdx]:=m_cmdJntTrq[m_testJntIdx] + g_slaveArmCtrlCycleTime*2/1000.0*GVL_SlaveMotorParameters.g_motorTrqConst[i_slaveArm.armIdx,m_testJntIdx]*GVL_SlaveMotorParameters.g_motorReduction[i_slaveArm.armIdx,m_testJntIdx];
		m_cmdJntPos[m_testJntIdx]:=i_slaveArm.curJntPos[m_testJntIdx];
		IF ABS(i_slaveArm.curJntVel[m_testJntIdx])>5*g_deg2rad THEN
			m_jntOPMode[m_testJntIdx] := DriverOPMode_PosTrq;
			m_staticFrictionTest:=FALSE;
		END_IF
	ELSIF m_constVelTestFlag THEN
		IF m_cmdJntPos[m_testJntIdx]> m_jntPosUb[m_testJntIdx]- 0.001 THEN
			m_OTGTargetPos[m_testJntIdx]:=m_jntPosLb[m_testJntIdx];
		ELSIF m_cmdJntPos[m_testJntIdx]< m_jntPosLb[m_testJntIdx]+ 0.001 THEN
			m_OTGTargetPos[m_testJntIdx]:=m_jntPosUb[m_testJntIdx];
		END_IF
		m_jntMotionOTG[m_testJntIdx].run(m_OTGTargetPos[m_testJntIdx],0, o_cmdAcc=>, o_cmdVel =>m_cmdJntVel[m_testJntIdx], o_cmdPos =>m_cmdJntPos[m_testJntIdx]);
	ELSE
		m_jntOPMode[m_testJntIdx] := DriverOPMode_PosTrq;
		m_timePeriod:=0;
		m_cmdJntTrq[m_testJntIdx]:=0;
		m_jntMotionOTG[m_testJntIdx].init(i_slaveArm.curJntPos[m_testJntIdx], 0,m_maxJntVel[m_testJntIdx], m_maxJntAcc[m_testJntIdx], g_slaveArmCtrlCycleTime);
	END_IF
	
END_IF


m_lastCmdJntPos:=m_cmdJntPos;

FOR i:=1 TO 3 DO 
	IF i=3 THEN
		errThres := 0.01;
	ELSE
		errThres :=15*g_deg2rad;
	END_IF
	
	IF ABS(m_cmdJntPos[i]-i_slaveArm.curJntPos[i])>errThres THEN
		m_isFinished:=TRUE;
		m_errPosIdx:=i;
		m_errCmdPos:=m_cmdJntPos[i];
		m_errCurPos :=i_slaveArm.curJntPos[i];
	END_IF
	
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="calcCmdJntPos_withInstru" Id="{58388f42-ab3f-4831-a570-358df05ba1ea}">
      <Declaration><![CDATA[METHOD PROTECTED calcCmdJntPos_withInstru : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	i:INT :=0;
	errThres :LREAL;
	m_masterGripAngle: INT;
	instruRotAng:REAL;
	instruRotMat:Mat3d;
	slavePosErr:Vec3d;
	tmpMat3d:Mat3d;
	slaveRotErr :Mat3d;
	errAngle:LREAL;
	errAxisLocal,errAxis:Vec3d;
	slaveCmdVel, slaveCmdWVel:Vec3d;
	slaveTrackTwist:Vec6d;
	cmdVelScale :REAL:=1;
	invJaco :Mat6d;
	simDHJointVel:Vec6d;
	DHJntCmdDeltaPos:Vec6d;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Just for joint controller test
IF m_testJntIdx >=1 AND m_testJntIdx <=6 THEN
	IF m_freqTestFlag THEN 
		m_cmdDHJntPos[m_testJntIdx]:=m_initDHJntPos[m_testJntIdx]+m_jntMotionRange[m_testJntIdx]/2
										+0.5*m_jntMotionRange[m_testJntIdx]*SIN(2*pi*m_jntMotionFreq[m_testJntIdx]*m_timePeriod-pi/2);
		m_cmdDHJntVel[m_testJntIdx]:=0.5*m_jntMotionRange[m_testJntIdx]*2*pi*m_jntMotionFreq[m_testJntIdx]*COS(2*pi*m_jntMotionFreq[m_testJntIdx]*m_timePeriod-pi/2);
	ELSIF m_stepTestFlag THEN
		m_cmdDHJntPos[m_testJntIdx]:=m_initDHJntPos[m_testJntIdx]+m_jntStep;
	ELSE
		m_timePeriod:=0;
	END_IF
	
END_IF

// instrument rotation test
IF m_instruRotTest AND NOT(m_freqTestFlag) AND NOT(m_stepTestFlag) THEN
	m_instruRotOTG.run(m_jntStep,0.0, o_cmdAcc=>,o_cmdVel=>,o_cmdPos=> instruRotAng);
	instruRotMat :=  angAxis2Rot(instruRotAng,m_instruRotAxis);
	matMultiply(m_slaveOriginPose.m_rot, instruRotMat,m_slaveCmdPose.m_rot );
	
		
	// compute pose error
	vecSub(m_slaveCmdPose.m_pos, i_slaveArm.simCartPose.m_pos, slavePosErr);
	matTranspose(i_slaveArm.simCartPose.m_rot, tmpMat3d);
	matMultiply(tmpMat3d, m_slaveCmdPose.m_rot, slaveRotErr);
	rot2AngAxis(slaveRotErr, angle=>errAngle, axis=>errAxisLocal);
	matMultiVec(i_slaveArm.simCartPose.m_rot, errAxisLocal, errAxis);
	
	// pose track control
	vecMultiNum(slavePosErr, g_slaveArmCtrlFreq, slaveCmdVel);
	vecMultiNum(errAxis, errAngle*g_slaveArmCtrlFreq, slaveCmdWVel);
	FOR i:=1 TO 3 DO 
		slaveTrackTwist[i] := slaveCmdVel[i];
		slaveTrackTwist[i+3] := slaveCmdWVel[i];
	END_FOR
	
	// compute command velocity for DH joints
	invJaco := i_slaveArm.simJacoInv;
	matMultiVec(invJaco, slaveTrackTwist, simDHJointVel);
	
	// limit DH joints velocity 
	cmdVelScale := 1;
	FOR i:=1 TO g_cartDofs DO 
		cmdVelScale:=MAX(cmdVelScale, ABS(simDHJointVel[i]/GVL_SlaveMotorParameters.g_maxJntVel[i]));
	END_FOR
	vecSelfMultiNum(simDHJointVel, 1.0/cmdVelScale);
	
	// integrate command DH joint position
	vecMultiNum(simDHJointVel, g_slaveArmCtrlCycleTime, DHJntCmdDeltaPos);
	vecSelfAdd(m_cmdDHJntPos, DHJntCmdDeltaPos);
	
ELSE
	m_slaveOriginPose := i_slaveArm.simCartPose;
	m_slaveCmdPose := m_slaveOriginPose;
END_IF

// calculate target motor joint position from DH joint position
i_slaveArm.instrument.instruIK(m_cmdDHJntPos,m_gripperAngle, o_jntPos=>m_cmdJntPos);
//m_cmdJntPos[4]:=m_originalJntPos[4];
//m_cmdJntPos[5]:=m_originalJntPos[5];
//m_cmdJntPos[6]:=m_originalJntPos[6];
//m_cmdJntPos[7]:=m_originalJntPos[7];
//m_cmdJntPos[8]:=m_originalJntPos[8];

IF m_freqTestFlag THEN 
	vecSub(m_cmdJntPos, m_lastCmdJntPos, m_cmdJntVel);
	vecSelfMultiNum(m_cmdJntVel, g_slaveArmCtrlFreq);
ELSE
	m_cmdJntVel:=g_zeroVec8d;
END_IF
m_lastCmdJntPos:=m_cmdJntPos;

FOR i:=1 TO 3 DO 
	IF i=3 THEN
		errThres := 0.01;
	ELSE
		errThres :=5*g_deg2rad;
	END_IF
	
	IF ABS(m_cmdDHJntPos[i]-i_slaveArm.curDHJntPos[i])>errThres THEN
		m_isFinished:=TRUE;
		m_errPosIdx:=i;
		m_errCmdPos:=m_cmdJntPos[i];
		m_errCurPos :=i_slaveArm.curJntPos[i];
	END_IF
	
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="calcCmdJntPos_zTrack" Id="{9540f3cd-9be5-42b4-a33b-11f8bbc57ef0}">
      <Declaration><![CDATA[METHOD PROTECTED calcCmdJntPos_zTrack : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR
	curZAxis:Vec3d;
	wrdPose :ST_Frame;
	angle:LREAL;
	axis:Vec3d;
	cartTrackVel:Vec3d;
	
	oriJaco, oriJacoInv :Mat3d;
	jntTrackVel :Vec3d;
	i,j :INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// compute pose in world
wrdPose:= transform(i_setupStatus.m_curEndPose[m_armIdx], i_slaveArm.curCartPose);
curZAxis[1]:=wrdPose.m_rot[1,3];
curZAxis[2]:=wrdPose.m_rot[2,3];
curZAxis[3]:=wrdPose.m_rot[3,3];

angle := ACOS(LIMIT(-1,vecDot(m_cmdZAxis,curZAxis),1));
axis := cross(curZAxis, m_cmdZAxis);
IF ABS(angle)> g_smallAng AND ABS(angle-pi)> g_smallAng THEN
	normalize(axis);
END_IF
vecMultiNum(axis, LIMIT(-m_cmdZTrackMaxV, angle*m_cmdZTrackKp, m_cmdZTrackMaxV), cartTrackVel);

// compute pinv of orientation jacobian
FOR i:=1 TO 3 DO
	FOR j:=1 TO 3 DO
		oriJaco[i,j]:=i_slaveArm.simJaco[i,j+3];
	END_FOR
END_FOR
invMat3(oriJaco, oriJacoInv);
matMultiVec(oriJacoInv, cartTrackVel, jntTrackVel);

m_cmdJntVel[1]:= jntTrackVel[1];
m_cmdJntVel[2]:= jntTrackVel[2];
m_cmdJntPos[1]:= m_cmdJntPos[1] + m_cmdJntVel[1]*g_slaveArmCtrlCycleTime;
m_cmdJntPos[2]:= m_cmdJntPos[2] + m_cmdJntVel[2]*g_slaveArmCtrlCycleTime;

FOR i:=1 TO 2 DO 
	IF ABS(m_cmdJntPos[i]-i_slaveArm.curJntPos[i])>15*g_deg2rad THEN
		m_isFinished:=TRUE;
	END_IF
	
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="calcCmdJntTrq" Id="{20caef8c-c6ca-4231-a1db-99ea7fdfefd2}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntTrq : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR

VAR 
	nullspaceMat :Mat7d;
	ctrlTrq : Vec7d;
	i : int ;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF not(i_slaveArm.instruOn) THEN
	RETURN;
END_IF

// set joint torque to zero in default
//m_cmdJntTrq := g_zeroVec8d;

// instrument joint control

FOR i:=1 TO 5 DO 
	m_instruCmdJntPos[i]:=m_cmdJntPos[i+3];
	m_instruCmdJntVel[i]:=m_cmdJntVel[i+3];
END_FOR
m_instruController.run(m_instruCmdJntPos,m_instruCmdJntVel, m_cmdDHJntPos[6], m_cmdDHJntVel[6], m_gripForceLevel, i_slaveArm, o_cmdJntTrq=>m_instruCmdJntTrq);

FOR i:=1 TO 5 DO
	m_cmdJntTrq[i+3]:=m_instruCmdJntTrq[i];
END_FOR

// add friction
IF m_enableFrictionComp THEN
	enableFrictionCompensation(i_slaveArm);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{388dcf2d-f48f-48c6-a819-d4fb050e3c51}">
      <Declaration><![CDATA[METHOD PUBLIC init : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm	:FB_SlaveArm;
END_VAR
VAR_IN_OUT 
	r_slaveArmCtrlCmd :ST_SlaveArmCtrlCmds;
END_VAR
VAR 
	i :int;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Init(i_slaveArm,r_slaveArmCtrlCmd);
m_lastCmdJntPos:=m_cmdJntPos;
m_jntOPMode[1] := DriverOPMode_PosTrq;
m_jntOPMode[2] := DriverOPMode_PosTrq;
m_jntOPMode[3] := DriverOPMode_PosTrq;
IF i_slaveArm.instruOn THEN
	m_jntOPMode[4] := DriverOPMode_Trq;
	m_jntOPMode[5] := DriverOPMode_Trq;
	m_jntOPMode[6] := DriverOPMode_Trq;
	m_jntOPMode[7] := DriverOPMode_Trq;
	m_jntOPMode[8] := DriverOPMode_Trq;

ELSE
	m_jntOPMode[4] := DriverOPMode_Pos;
	m_jntOPMode[5] := DriverOPMode_Pos;
	m_jntOPMode[6] := DriverOPMode_PosTrq;
	m_jntOPMode[7] := DriverOPMode_PosTrq;
	m_jntOPMode[8] := DriverOPMode_PosTrq;
END_IF

FOR i:=1 TO 8 DO 
	m_OTGTargetPos[i]:=m_jntPosUb[i];
	m_jntMotionOTG[i].init(i_slaveArm.curJntPos[m_testJntIdx], 0,m_maxJntVel[i], m_maxJntAcc[i], g_slaveArmCtrlCycleTime);
END_FOR

m_initDHJntPos :=i_slaveArm.curDHJntPos;
m_initJntPos := i_slaveArm.curJntPos;
m_cmdDHJntPos :=m_initDHJntPos;
m_cmdDHJntVel :=g_zeroVec6d;
m_gripperAngle := i_slaveArm.curGripAngle;

// init instrument controller
m_instruController.init(i_slaveArm);

m_instruRotOTG.init(0, 0,1, 2, g_slaveArmCtrlCycleTime);

m_CTCCtrl.init(i_slaveArm.armIdx, g_slaveArmCtrlCycleTime);


// update commands to arm
copyCmds(r_slaveArmCtrlCmd);


]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SlaveCtrlTest">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlTest.calcCmdJntPos">
      <LineId Id="332" Count="0" />
      <LineId Id="363" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="335" Count="1" />
      <LineId Id="334" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlTest.calcCmdJntPos_CTC">
      <LineId Id="434" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="205" Count="1" />
      <LineId Id="203" Count="1" />
      <LineId Id="208" Count="0" />
      <LineId Id="332" Count="4" />
      <LineId Id="338" Count="2" />
      <LineId Id="342" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="399" Count="1" />
      <LineId Id="443" Count="0" />
      <LineId Id="402" Count="1" />
      <LineId Id="444" Count="0" />
      <LineId Id="401" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="456" Count="8" />
      <LineId Id="445" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="496" Count="0" />
      <LineId Id="507" Count="1" />
      <LineId Id="501" Count="3" />
      <LineId Id="497" Count="0" />
      <LineId Id="505" Count="0" />
      <LineId Id="509" Count="1" />
      <LineId Id="506" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="442" Count="0" />
      <LineId Id="431" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="121" Count="1" />
      <LineId Id="124" Count="1" />
      <LineId Id="123" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="127" Count="1" />
      <LineId Id="170" Count="2" />
      <LineId Id="126" Count="0" />
      <LineId Id="118" Count="1" />
      <LineId Id="113" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlTest.calcCmdJntPos_noInstru">
      <LineId Id="114" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="205" Count="1" />
      <LineId Id="203" Count="1" />
      <LineId Id="208" Count="0" />
      <LineId Id="332" Count="4" />
      <LineId Id="338" Count="2" />
      <LineId Id="342" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="399" Count="1" />
      <LineId Id="402" Count="1" />
      <LineId Id="401" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="121" Count="1" />
      <LineId Id="124" Count="1" />
      <LineId Id="123" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="127" Count="1" />
      <LineId Id="170" Count="2" />
      <LineId Id="126" Count="0" />
      <LineId Id="118" Count="1" />
      <LineId Id="113" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlTest.calcCmdJntPos_withInstru">
      <LineId Id="114" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="205" Count="1" />
      <LineId Id="203" Count="1" />
      <LineId Id="208" Count="2" />
      <LineId Id="207" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="248" Count="1" />
      <LineId Id="257" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="262" Count="5" />
      <LineId Id="261" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="270" Count="5" />
      <LineId Id="269" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="298" Count="1" />
      <LineId Id="297" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="291" Count="3" />
      <LineId Id="285" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="304" Count="1" />
      <LineId Id="303" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="251" Count="1" />
      <LineId Id="255" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="161" Count="1" />
      <LineId Id="164" Count="0" />
      <LineId Id="228" Count="4" />
      <LineId Id="211" Count="0" />
      <LineId Id="186" Count="2" />
      <LineId Id="212" Count="2" />
      <LineId Id="131" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="121" Count="1" />
      <LineId Id="124" Count="1" />
      <LineId Id="123" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="127" Count="1" />
      <LineId Id="170" Count="2" />
      <LineId Id="126" Count="0" />
      <LineId Id="118" Count="1" />
      <LineId Id="113" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlTest.calcCmdJntPos_zTrack">
      <LineId Id="15" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="2" />
      <LineId Id="19" Count="13" />
      <LineId Id="35" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="66" Count="1" />
      <LineId Id="71" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="54" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlTest.calcCmdJntTrq">
      <LineId Id="195" Count="2" />
      <LineId Id="146" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="135" Count="3" />
      <LineId Id="161" Count="0" />
      <LineId Id="139" Count="5" />
      <LineId Id="176" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="178" Count="2" />
      <LineId Id="177" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlTest.init">
      <LineId Id="13" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="86" Count="2" />
      <LineId Id="137" Count="0" />
      <LineId Id="150" Count="3" />
      <LineId Id="149" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="154" Count="3" />
      <LineId Id="148" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="169" Count="1" />
      <LineId Id="68" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="84" Count="1" />
      <LineId Id="93" Count="0" />
      <LineId Id="81" Count="2" />
      <LineId Id="129" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="110" Count="1" />
      <LineId Id="109" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>