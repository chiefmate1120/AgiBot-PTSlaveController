<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_SlaveCtrlDargFreeTest" Id="{56556deb-8915-4729-97e3-a8f7e4569550}" SpecialFunc="None">
    <Declaration><![CDATA[// Brief: Slave Arm Adjust
FUNCTION_BLOCK PUBLIC FB_SlaveCtrlDargFreeTest EXTENDS FB_SlaveArmCtrlBase
VAR
	// velocity for full damping
	m_maxAdjustVel :Vec3d := [1.2, 1.2, 0.3];
	
	// velocity start to enable damping
	m_velLBForDamp :Vec3d := [0.7, 0.7, 0.1];
	
	// max damp
	m_maxDamp :Vec3d := [1,1,100];//50, 50, 500
	
	// distance buffer from joint limit to start damp
	m_limitBufferForDamp :Vec3d :=[20*g_deg2Rad, 20*g_deg2Rad, 0.03];
	
	//joint limit position
	m_DHjntPos:Vec8d;
	m_jntPosMin:Vec8d;
	m_jntPosMax:Vec8d;
	m_jntMotRange:Vec8d;
	
	//unit transform
	m_unitTransform:FB_UnitTransform;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="calcCmdJntPos" Id="{5cedd5a0-fa85-48d9-a6b4-18b50cbe2fb3}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntPos : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR
VAR
	i:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
(*
m_cmdJntPos[1]:=i_slaveArm.curJntPos[1];
m_cmdJntPos[2]:=i_slaveArm.curJntPos[2];
m_cmdJntPos[3]:=i_slaveArm.curJntPos[3];
FOR i:= 6 TO 8 DO
	IF m_jntOPMode[i] = DriverOPMode_Trq THEN
		m_cmdJntPos[i]:=i_slaveArm.curJntPos[i];
	END_IF
END_FOR

m_cmdCartPose:=i_slaveArm.curCartPose;
*)

//copy the current joint position to command joint position
m_cmdJntPos:=i_slaveArm.curJntPos;
m_cmdCartPose:=i_slaveArm.curCartPose;

//Calculate the LIMIT value
m_DHjntPos:=i_slaveArm.curJntPos;
FOR i:=1 TO 8 BY 1 DO
	IF (m_DHjntPos[i]>m_jntPosMax[i]) THEN
		m_jntPosMax[i]:=m_DHjntPos[i];
	ELSIF (m_DHjntPos[i]<m_jntPosMin[i]) THEN
		m_jntPosMin[i]:=m_DHjntPos[i];
	END_IF
END_FOR
vecSub(m_jntPosMax,m_jntPosMin,m_jntMotRange);

//feedback the information
i:=i_slaveArm.armIdx;
g_motionRangeTest.m_slaveJntPos[i]:=m_unitTransform.slaveArmUnit2UserN8(m_DHjntPos);
g_motionRangeTest.m_slaveJntPosMin[i]:=m_unitTransform.slaveArmUnit2UserN8(m_jntPosMin);
g_motionRangeTest.m_slaveJntPosMax[i]:=m_unitTransform.slaveArmUnit2UserN8(m_jntPosMax);
g_motionRangeTest.m_slaveJntPosRange[i]:=m_unitTransform.slaveArmUnit2UserN8(m_jntMotRange);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="calcCmdJntTrq" Id="{b3fabaf1-5d32-4e53-9850-80423e860bf4}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntTrq : BOOL
VAR_IN_OUT CONSTANT
	i_endoscopePose : ST_Frame;
	i_masterStatus :ST_MasterStatus;
	i_setupStatus: ST_SetupStatus;
	i_slaveArm :FB_SlaveArm;
END_VAR
VAR
	i :INT;
	dampScale :LREAL;
	limitDis:LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*
// set joint torque to zero in default
m_cmdJntTrq := g_zeroVec8d;

// enable endoscope rotation joint if external torque exceed specific value
IF i_slaveArm.instrument.onChipData.m_InstruReadSucceed AND i_slaveArm.instrument.instruType = InstruType_Endoscope THEN
		FOR i:=6 TO 8 DO 
			IF ABS(i_slaveArm.filtJntCurrent[i]) > 100 THEN
				m_jntOPMode[i]:=DriverOPMode_Trq;
			END_IF
		END_FOR
END_IF

// add damp near joint limit
FOR i:=1 TO 3 DO
	IF (i_slaveArm.curJntPos[i] > GVL_SlaveMotorParameters.g_maxDHJntPos[i] - m_limitBufferForDamp[i] AND  i_slaveArm.curJntVel[i]> 0 ) 
		OR (i_slaveArm.curJntPos[i] < GVL_SlaveMotorParameters.g_minDHJntPos[i] + m_limitBufferForDamp[i] AND  i_slaveArm.curJntVel[i]<0 )  THEN
		limitDis := MIN(GVL_SlaveMotorParameters.g_maxDHJntPos[i] - i_slaveArm.curJntPos[i], i_slaveArm.curJntPos[i]-GVL_SlaveMotorParameters.g_minDHJntPos[i]);
		dampScale  :=LIMIT(0, 1-limitDis/m_limitBufferForDamp[i],1);
		m_cmdJntTrq[i]:= -dampScale * m_maxDamp[i] * i_slaveArm.curJntVel[i];
	END_IF
	
END_FOR

// compute damp
FOR i:=1 TO 3 DO
	IF ABS(i_slaveArm.curJntVel[i]) > m_velLBForDamp[i] THEN 
		dampScale:=LIMIT(0, (ABS(i_slaveArm.curJntVel[i])- m_velLBForDamp[i])/(m_maxAdjustVel[i] - m_velLBForDamp[i]), 1 );
		m_cmdJntTrq[i] :=m_cmdJntTrq[i] -i_slaveArm.curJntVel[i] * m_maxDamp[i] * dampScale;
	END_IF
END_FOR
*)

m_cmdJntTrq := g_zeroVec8d;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{43ae67a2-b72a-4026-9dbb-dae4546670be}">
      <Declaration><![CDATA[METHOD PUBLIC init : BOOL
VAR_IN_OUT CONSTANT
	i_slaveArm	:FB_SlaveArm;
END_VAR
VAR_IN_OUT 
	r_slaveArmCtrlCmd :ST_SlaveArmCtrlCmds;
END_VAR
VAR
	i :INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check if to hold the command joint position unchanged
m_holdLastCmds := checkToHoldLastCmds(i_slaveArm);

//init
SUPER^.Init(i_slaveArm,r_slaveArmCtrlCmd);

// disable joints if this joint is an unrecoverable failure
FOR i:=1 TO g_sJntNum DO
	IF SafetyCheck.m_SafetyCheck.m_jntErrFlag[i_slaveArm.armIdx, 0, 3] OR  SafetyCheck.m_SafetyCheck.m_jntErrFlag[i_slaveArm.armIdx, i+g_setupJntNum, 3] THEN
		m_jntEnableFlag[i] := 0;
	ELSE
		m_jntEnableFlag[i] := 1;
	END_IF
END_FOR

// joint 1/2/3/7 run in torque mode
m_jntOPMode[1]:=DriverOPMode_Trq;
m_jntOPMode[2]:=DriverOPMode_Trq;
m_jntOPMode[3]:=DriverOPMode_Trq;
m_jntOPMode[4]:=DriverOPMode_PosTrq;
m_jntOPMode[5]:=DriverOPMode_PosTrq;
m_jntOPMode[6]:=DriverOPMode_PosTrq;
m_jntOPMode[7]:=DriverOPMode_PosTrq;
m_jntOPMode[8]:=DriverOPMode_PosTrq;

IF i_slaveArm.instrument.onChipData.m_InstruReadSucceed THEN
	IF i_slaveArm.instrument.instruType <> InstruType_Endoscope THEN
		m_jntOPMode[7]:=DriverOPMode_Trq;
	END_IF
END_IF

// update commands to arm
copyCmds(r_slaveArmCtrlCmd);


//add code for test
m_jntOPMode:=g_slaveAllTrqMode;
m_DHjntPos:=i_slaveArm.curJntPos;
m_jntPosMin:=m_DHjntPos;
m_jntPosMax:=m_DHjntPos;
vecSub(m_jntPosMax,m_jntPosMin,m_jntMotRange);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SlaveCtrlDargFreeTest">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlDargFreeTest.calcCmdJntPos">
      <LineId Id="129" Count="1" />
      <LineId Id="90" Count="2" />
      <LineId Id="113" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="114" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="133" Count="2" />
      <LineId Id="148" Count="0" />
      <LineId Id="136" Count="1" />
      <LineId Id="141" Count="6" />
      <LineId Id="140" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="152" Count="1" />
      <LineId Id="151" Count="0" />
      <LineId Id="131" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlDargFreeTest.calcCmdJntTrq">
      <LineId Id="236" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="175" Count="28" />
      <LineId Id="231" Count="0" />
      <LineId Id="233" Count="2" />
      <LineId Id="53" Count="0" />
    </LineIds>
    <LineIds Name="FB_SlaveCtrlDargFreeTest.init">
      <LineId Id="157" Count="32" />
      <LineId Id="201" Count="2" />
      <LineId Id="206" Count="0" />
      <LineId Id="208" Count="2" />
      <LineId Id="207" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>