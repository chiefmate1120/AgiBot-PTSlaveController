<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_SetupCtrlMotionTest" Id="{28156fc6-42d6-471d-b475-6f9a875357b9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SetupCtrlMotionTest EXTENDS FB_SetupArmCtrlBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR

VAR
	//arm id
	m_armId:INT;			
	
	//test step
	m_testStep:INT:=-1;
	
	//motion start
	m_startMotion:BOOL;
	m_startMotionLast:BOOL;
	
	//motion status
	m_motionFinished:BOOL;
	
	//time
	m_time:LREAL;	
	
	//control mode
	m_controlMode:INT:=0;
	
	//during PTP motion flag
	m_duringPTPMot:BOOL;
	
	//during CST motion flag
	m_duringCSTMot:BOOL;
	
	//planner
	m_Planner: FB_setupTrajMoveJ;
	
	//trajectory velocity/acceleration/jerk
	m_maxjntVel:Vec5d:=[2(1),0.01, 2(5*g_deg2Rad)];
	m_maxjntAcc:Vec5d:=[2(1),0.5,2(0.5)];
	m_maxjntJerk:Vec5d:=[2(1),1.0,2(2.0)];
	
	//startJntPos,endJntPos :Vec8d;
	m_initJntPos,m_startJntPos,m_endJntPos :Vec5d;
	m_motDist:Vec5d;
	
	//motor parameters
	m_motorReduction :LREAL;
	m_trqConst :LREAL;
	m_motorDir :INT;
	m_trq2CurrentRatio:LREAL;
	m_current2TrqRatio:LREAL;
	m_armCurrent2TrqRatio:Vec5d;
	m_jntGravity : Vec5d:=g_zeroVec5d;
	m_targetTrq:Vec5d;
	
	//unit function
	m_unitFun:FB_UnitTransform;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="calcCmdJntPos" Id="{67a603a2-5d8f-48e8-bfab-f0ab5e3ada36}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntPos : BOOL
VAR_IN_OUT CONSTANT
	i_setupArm	:FB_SetupArm;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

//Initialization of motion parameters
m_startMotion:=g_motionTest.m_startMotion[m_armId];
m_controlMode:=g_motionTest.m_controlMode[m_armId];

//update the joint position
g_motionTest.m_actJntPosSetup[m_armId]:=m_unitFun.setupArmUnit2User(i_dataSystem:= i_setupArm.curJntPos);
g_motionTest.m_actJntCurrentSetup[m_armId]:=i_setupArm.filtJntCurrent;

//joint enable
m_jntEnableFlag:=g_motionTest.m_jntEnableSetup[m_armId];
m_jntEnableFlag[3]:=0;


IF (m_startMotionLast=FALSE) AND (m_startMotion=TRUE) THEN
	m_testStep:=0;	
	m_motionFinished:=FALSE;
END_IF
m_startMotionLast:=m_startMotion;


//Select different programs based on different control modes
IF (m_controlMode=1) OR (m_duringPTPMot) THEN
	jntSinglePoint(i_setupArm);
	
ELSIF (m_controlMode=9) OR (m_duringCSTMot) THEN
	jntCurrentMode(i_setupArm);
END_IF


//cover the command joint position
IF (g_motionTest.m_coverCmdPos[m_armId]=TRUE) THEN
	g_motionTest.m_targetJntPosSetup[m_armId]:=m_unitFun.setupArmUnit2User(i_dataSystem:= i_setupArm.curJntPos);
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="calcCmdJntTrq" Id="{94801ee0-5640-48e4-ac59-cfc306f3b70f}">
      <Declaration><![CDATA[// override this function in each exact controller
METHOD PROTECTED calcCmdJntTrq : BOOL
VAR_IN_OUT CONSTANT
	i_setupArm	:FB_SetupArm;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

//do nothing

]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{ae14ca7e-fe9e-4aad-a59b-45477bbf8c9a}">
      <Declaration><![CDATA[// override this function in each exact controller
// NOTICE: set joint control mode here, and do some initialization if needed
METHOD PUBLIC init : BOOL
VAR_IN_OUT CONSTANT
	i_setupArm	:FB_SetupArm;
END_VAR
VAR_IN_OUT 
	r_setupArmCtrlCmd :ST_SetupArmCtrlCmds;
END_VAR
VAR
	i:INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Init(i_setupArm,r_setupArmCtrlCmd);
m_jntEnableFlag:=g_onesVec5i; m_jntEnableFlag[1]:=0; m_jntEnableFlag[2]:=0;
m_jntOPMode:= g_setupAllPosMode;


//basic parameter init
m_armId:=i_setupArm.armIdx;
m_startMotionLast:=FALSE;


//joint enable
g_motionTest.m_jntEnableSetup[m_armId]:=g_onesVec5i;
g_motionTest.m_jntEnableSetup[m_armId][1]:=0;  g_motionTest.m_jntEnableSetup[m_armId][2]:=0;  g_motionTest.m_jntEnableSetup[m_armId][3]:=0;


//velocity and acceleration
vecMultiNum(GVL_SetupMotorParameters.g_maxJntVel,0.1,m_maxjntVel);
vecMultiNum(m_maxjntVel,3,m_maxjntAcc);
vecMultiNum(m_maxjntAcc,3,m_maxjntJerk);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="jntCurrentMode" Id="{ffbd206a-512c-4bcd-9a00-9c5e923a4283}">
      <Declaration><![CDATA[METHOD jntCurrentMode : BOOL
VAR_INPUT
	i_setupArm	:FB_SetupArm;
END_VAR
VAR
	i_jntIdx:INT;
	i:INT;
	targetTrq:Vec5d;
	r_setupArmCtrlCmd :ST_SetupArmCtrlCmds;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

CASE m_testStep OF
	0: //init	
		FOR i_jntIdx:=1 TO 5 BY 1 DO
			m_motorReduction :=GVL_SetupMotorParameters.g_motorReduction[i_jntIdx];
			m_trqConst :=GVL_SetupMotorParameters.g_motorTrqConst[i_jntIdx];
			m_motorDir :=GVL_SetupMotorParameters.g_motorDir[i_jntIdx];
			m_trq2CurrentRatio:=m_motorDir * 1000.0/(m_trqConst*m_motorReduction);
			m_current2TrqRatio:=m_motorDir * (m_trqConst*m_motorReduction)/1000.0;
			m_armCurrent2TrqRatio[i_jntIdx]:=m_current2TrqRatio;
		END_FOR
		
		//update the torque
		m_jntGravity:=i_setupArm.jntGravity;
		
		SUPER^.Init(i_setupArm,r_setupArmCtrlCmd);
		m_jntEnableFlag:=g_onesVec5i; m_jntEnableFlag[1]:=0; m_jntEnableFlag[2]:=0;
		
		FOR i:=1 TO 5 BY 1 DO
			m_jntOPMode[i]:=DriverOPMode_Trq;
			targetTrq[i]:=g_motionTest.m_targetJntCurrentSetup[m_armId][i]*m_armCurrent2TrqRatio[i];
			m_cmdJntTrq[i]:=targetTrq[i]-m_jntGravity[i];
		END_FOR
		
		m_time:=0;
		m_testStep:=10;
		m_duringCSTMot:=TRUE;
		
		
	10: //update the joint current
		m_jntGravity:=i_setupArm.jntGravity;
		FOR i:=1 TO 5 BY 1 DO
			targetTrq[i]:=g_motionTest.m_targetJntCurrentSetup[m_armId][i]*m_armCurrent2TrqRatio[i];
			m_targetTrq[i]:=targetTrq[i];
			m_cmdJntTrq[i]:=targetTrq[i]-m_jntGravity[i];
		END_FOR
		
		//actual joint position copy to command joint posoition
		m_cmdJntPos:=i_setupArm.curJntPos;
		
		//exit
		IF (g_motionTest.m_uiArmMode[m_armId,9]=FALSE) THEN
			m_testStep:=20;
		END_IF
		
		
	20: //Switch to normal state
		SUPER^.Init(i_setupArm,r_setupArmCtrlCmd);		
		m_jntEnableFlag:=g_motionTest.m_jntEnableSetup[m_armId];
		m_jntEnableFlag[3]:=0;
		m_cmdJntPos:=i_setupArm.curJntPos;
		
		m_motionFinished:=TRUE;
		m_duringCSTMot:=FALSE;
		m_testStep:=-1;
		
		
	-1: //
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="jntSinglePoint" Id="{7ba29974-ccdf-47a2-86f8-78fd58fee145}">
      <Declaration><![CDATA[METHOD jntSinglePoint : BOOL
VAR_INPUT
	i_setupArm	:FB_SetupArm;
END_VAR
VAR
	homeDHPos,startDHPos,endDHPos :Vec5d;
	m_targetJntPosInc:Vec5d;
	i:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

CASE m_testStep OF
	0: //init
		IF (g_motionTest.m_singleMotorControl[m_armId]=TRUE) THEN
			m_maxjntVel:=m_unitFun.setupArmUnit2System(i_dataTest:= g_motionTest.m_targetJntVelSetup[m_armId]);
						
			FOR i:=1 TO 5 BY 1 DO
				IF ABS(m_maxjntVel[i])<g_smallNum THEN
					m_maxjntVel[i]:=g_motionTest.m_defultTargetJntVelSetup[i];
				END_IF
			END_FOR			
			
			vecMultiNum(m_maxjntVel,3,m_maxjntAcc);
			vecMultiNum(m_maxjntAcc,3,m_maxjntJerk);
		END_IF		
		m_testStep:=10;
		m_duringPTPMot:=TRUE;
		
		
	10: //trajectory init
		startDHPos:=i_setupArm.curJntPos;
		endDHPos:=m_unitFun.setupArmUnit2System(i_dataTest:= g_motionTest.m_targetJntPosSetup[m_armId]);
		
		m_startJntPos:=startDHPos;
		m_endJntPos:=endDHPos;
		
		IF (g_motionTest.m_singleMotorIncControl[m_armId]=TRUE) THEN
			m_targetJntPosInc:=m_unitFun.setupArmUnit2System(i_dataTest:= g_motionTest.m_targetJntPosIncSetup[m_armId]);
			vecAdd(m_startJntPos,m_targetJntPosInc,m_endJntPos);
		END_IF
		
		//motion distance judgement
		vecSub(m_endJntPos,m_startJntPos,m_motDist);
		IF (norm(m_motDist)<g_smallNum) THEN
			m_testStep:=30;
			RETURN;
		END_IF
				
		m_Planner.init(i_startJntPos:= m_startJntPos, 	i_targetJntPos:= m_endJntPos, 	i_maxJntVel:= m_maxjntVel, 	i_maxJntAcc:= m_maxjntAcc, 	i_maxJntJerk:= m_maxjntJerk);
		IF (m_Planner.isGene=FALSE) THEN
			m_testStep:=30;
		ELSE
			m_time:=0; m_testStep:=20;
		END_IF
	
	
	20: //motion
		m_time:=m_time+g_setupArmCtrlCycleTime;
		m_Planner.evaluate(t:= m_time, jntPos=> m_cmdJntPos, jntVel=> m_cmdJntVel, jntAcc=> m_cmdJntAcc);
		IF (m_time>m_Planner.duration) THEN
			m_testStep:=30;
		END_IF
	
		
	30: //finish
		m_testStep:=-1;		
		m_duringPTPMot:=FALSE;
		
	
	-1: //
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SetupCtrlMotionTest">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_SetupCtrlMotionTest.calcCmdJntPos">
      <LineId Id="172" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="182" Count="2" />
      <LineId Id="216" Count="1" />
      <LineId Id="219" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="233" Count="1" />
      <LineId Id="200" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="185" Count="3" />
      <LineId Id="190" Count="0" />
      <LineId Id="159" Count="2" />
      <LineId Id="191" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="196" Count="1" />
      <LineId Id="193" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="242" Count="3" />
      <LineId Id="241" Count="0" />
      <LineId Id="198" Count="0" />
    </LineIds>
    <LineIds Name="FB_SetupCtrlMotionTest.calcCmdJntTrq">
      <LineId Id="7" Count="3" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_SetupCtrlMotionTest.init">
      <LineId Id="11" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="177" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="190" Count="3" />
      <LineId Id="175" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="129" Count="1" />
      <LineId Id="127" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="98" Count="0" />
    </LineIds>
    <LineIds Name="FB_SetupCtrlMotionTest.jntCurrentMode">
      <LineId Id="9" Count="2" />
      <LineId Id="13" Count="0" />
      <LineId Id="77" Count="6" />
      <LineId Id="48" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="87" Count="3" />
      <LineId Id="133" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="91" Count="5" />
      <LineId Id="98" Count="0" />
      <LineId Id="84" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="105" Count="3" />
      <LineId Id="136" Count="0" />
      <LineId Id="109" Count="2" />
      <LineId Id="130" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="112" Count="2" />
      <LineId Id="103" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="117" Count="1" />
      <LineId Id="157" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="120" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_SetupCtrlMotionTest.jntSinglePoint">
      <LineId Id="9" Count="2" />
      <LineId Id="13" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="117" Count="1" />
      <LineId Id="116" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="49" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="66" Count="1" />
      <LineId Id="93" Count="0" />
      <LineId Id="69" Count="1" />
      <LineId Id="127" Count="1" />
      <LineId Id="120" Count="0" />
      <LineId Id="123" Count="1" />
      <LineId Id="126" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="34" Count="4" />
      <LineId Id="22" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="40" Count="3" />
      <LineId Id="39" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>